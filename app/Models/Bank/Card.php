<?php

namespace App\Models\Bank;

use App\Classes\TochkaBank\BankAPI;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Crypt;

class Card extends Model
{
    use HasFactory;

    protected $dates = ['expiredAt'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function geo()
    {
        return $this->belongsTo(Geo::class);
    }

    public function seller()
    {
        return $this->belongsTo(Seller::class);
    }

    public function operations()
    {
        return $this->hasMany(CardsOperation::class, 'card_id');
    }

//    public function getNumberAttribute()
//    {
//        $value = "$this->head **** **** $this->tail";
//
//        return $value;
//    }

    public function getAccountIdAttribute()
    {
        return $this->account_code .'/'. $this->bank_code;
    }

    public function getUserAttribute()
    {
        return $this->user()->first();
    }

    public function setNumberAttribute(string $value): void
    {
        $number = $this->getNumberSplit($value);
        if($number[1] === '****' and $number[2] === '****')
        {
            $value = isset($this->attributes['number']) ? Crypt::decryptString($this->attributes['number']) : $this->attributes['number'];
            $number = $this->getNumberSplit($value);
        }

        $this->attributes['number'] = Crypt::encryptString("$number[0] $number[1] $number[2] $number[3]");
        $this->attributes['head'] = $number[0];
        $this->attributes['tail'] = $number[3];
    }

    private function getNumberSplit($number)
    {
        $number = str_replace(' ', '', $number);
        return str_split($number, 4);
    }


    public static function getCollectApi(): \Illuminate\Support\Collection
    {
        $cardsApi = BankAPI::make()->getCards();
        if(!isset($cardsApi->Data)) {
            dd($cardsApi);
        }
        $cards =[];
        foreach ($cardsApi->Data->cards as $card) {
            $cards[] = collect([
                'account_code' => $card->accountCode,
                'bank_code' => $card->bankCode,
                'number' => $card->maskedPan,
                'card_description' => $card->cardDescription,
                'card_type' => $card->cardProductType,
                'expiredAt' => Carbon::createFromFormat('m#y H', $card->expirationDate. ' 00'),
                'state' => true ? $card->previewState == 'Active' : false
            ]);
        }

        return collect($cards);
    }

    public static function refreshApi()
    {
        $cards = self::getCollectApi();

        self::upsert(
            $cards->toArray(),
            [
                'number',
                'card_description',
                'card_type',
                'expiredAt',
                'state'
            ]
        );
    }

    public function getStateAttribute()
    {
        return $this->attributes['state'] ? 'Активная' : 'Закрытая';
    }

    public static function all($columns = ['*'])
    {
        return parent::all($columns); // TODO: Change the autogenerated stub
    }

    public function payments()
    {
        return $this->hasOne(Payment::class, 'account_id', 'account_code');
    }

    public function getPayments()
    {
        return $this->payments()->where('amount', '>', 0);

    }

    public function amount()
    {
        return $this->payments()
            ->where('type', 'OpeningAvailable')
            ->sum('amount');
    }
}
